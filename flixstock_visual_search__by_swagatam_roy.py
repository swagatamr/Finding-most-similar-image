# -*- coding: utf-8 -*-
"""Flixstock_Visual_Search__by_SWAGATAM_ROY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xiW_1qosO151eUwHO0y2DhCVRBjo4vMQ

##Getting the dataset
```
"""

# link for  dataset

!wget -O visualsimilarity.zip https://drive.google.com/file/d/1OCvfi5L_znC3xGGyH_hXEYEKSGcRleHU/view

from google.colab import drive
drive.mount('/content/drive')

!unzip '/content/drive/MyDrive/visualsimilarity.zip'

!ls

"""##Getting the details of the data"""

import glob
p=glob.glob("/content/bottoms_resized_png/*.png")

p

len(p)

import cv2
img=cv2.imread("/content/bottoms_resized_png/13079565VVD.png")

img.shape

img

from google.colab.patches import cv2_imshow
cv2_imshow(img)

"""##Checking whole data"""

for i in range(len(p)):
  img=cv2.imread(p[i])
  cv2_imshow(img)

for i in range(len(p)):
  img=cv2.imread(p[i])
  print(img.shape)

"""##Preparing data"""

import cv2
array=[]
for i in range(len(p)):
  img=cv2.imread(p[i])
  array.append(img)

len(array)

"""##Modelling

importing packages
"""

import numpy as np

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications.resnet50 import ResNet50,preprocess_input

from sklearn.neighbors import NearestNeighbors

"""model"""

model = ResNet50(weights = 'imagenet', 
                 include_top = False,
                 input_shape = (500, 333, 3),
                 pooling = 'max' )

model.summary()

import tensorflow as tf
from keras.utils.vis_utils import plot_model
tf.keras.utils.plot_model(
model, to_file='model.png', show_shapes=True, show_dtype=False,
show_layer_names=True, rankdir='TB', expand_nested=False, dpi=96
)

import numpy as np

npa = np.asarray(array, dtype=np.float32)

"""##CREATING FEATURE LIST"""

feature_list = model.predict(npa)

"""##find the 10 most similar images

neighbrs=10 method=euclidean
"""

neighbors = NearestNeighbors(n_neighbors = 10,
                             metric = 'euclidean')

neighbors.fit(feature_list)

"""##Taking input and testing"""

#Pre-processing Image

img_path = '/content/bottoms_resized_png/13079565VVD.png'
input_shape = (500, 333, 3) #Setting image size

img = image.load_img(img_path, target_size=(input_shape[0], input_shape[1])) #Resizing image
img_array = image.img_to_array(img) #Converting it to an array
expanded_img_array = np.expand_dims(img_array, axis=0)
preprocessed_img = preprocess_input(expanded_img_array)
#Predicting similar images

test_img_features = model.predict(preprocessed_img, batch_size = 1)

_, indices = neighbors.kneighbors(test_img_features)

def similar_images(indices):
    plt.figure(figsize=(15,10), facecolor='white')
    plotnumber = 1    
    for index in indices:
        if plotnumber<=len(indices) :
            ax = plt.subplot(2,5,plotnumber)
            plt.imshow(mpimg.imread(p[index]), interpolation='lanczos')            
            plotnumber+=1
    plt.tight_layout()

plt.imshow(mpimg.imread(img_path), interpolation = 'lanczos')
plt.xlabel('Original Image',fontsize = 20)
plt.show()
print('Predictions for the Image ')
similar_images(indices[0])

#Pre-processing Image

img_path = '/content/bottoms_resized_png/13110484CLD.png'
input_shape = (500, 333, 3) #Setting image size

img = image.load_img(img_path, target_size=(input_shape[0], input_shape[1])) #Resizing image
img_array = image.img_to_array(img) #Converting it to an array
expanded_img_array = np.expand_dims(img_array, axis=0)
preprocessed_img = preprocess_input(expanded_img_array)
#Predicting similar images

test_img_features = model.predict(preprocessed_img, batch_size = 1)

_, indices = neighbors.kneighbors(test_img_features)
plt.imshow(mpimg.imread(img_path), interpolation = 'lanczos')
plt.xlabel('Original Image',fontsize = 20)
plt.show()
print('Predictions for the Image ')
similar_images(indices[0])

